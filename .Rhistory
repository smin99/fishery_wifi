<<<<<<< HEAD
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
has_number(paste(test_for_RemoveDigits))
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
paste(RemoveDigits(c("INFO 201", "CSE 142", "mps-803c")))
paste("fdnjskafjdk","fjdksjfal;djk","fjdksjlfa")
paste(test_for_RemoveDigits)
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
source('~/Desktop/Class/AU2018/INFO201/Assignments/a2-core-programming-ktw0222/assignment.R')
install.packages("babynames")
library(babynames)
head((babynames))
babynames
babynames("Kevin")
babynames(year=1998)
boys <- babynames[babynames$sex =="M"]
boys <- babynames[babynames$sex =="M",]
boys
year_1998 <- boys[boys$year=="1998",]
year_1998
Kevins <- babynames[babynames$name=="Kevin",]
Kevins
Kevins[babynames$n==which.max(n),]
Kevins_2000 <- Kevins[Kevins$year=="2000",]
Kevins_2000
girls <- babynames[babynames$sex=="F",]
with(Kevins,year[which.max(n)])
with(babynames,name["Kevin"] && year[which.max(n)])
with(babynames,name["Kevin"] && year[which.max(n)])
filter(babynames, name=="Kevin")
filter(babynames, name =="Kevin")
install.packages(dpl
)
install.packages("dplyr")
library(dolyr)
source('~/.active-rstudio-document', echo=TRUE)
head(diamonds)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(economics)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(maps))
install.packages(maps)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("maps")
library(maps)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(us)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?topo.colors
?gradient
?gradient()
?scale_fill_gradient()
library(shiny)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222/Assignment8')
runApp('Desktop/Class/AU2018/INFO201/Assignments/a8-app-ktw0222')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("mapdata")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(states)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Desktop/Class/AU2018/INFO201/Assignments/final project')
View(states %>% group_by(region) %>% count())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(states)
source('~/.active-rstudio-document', echo=TRUE)
runApp('Desktop/Class/AU2018/INFO201/Assignments/final project/final_project')
tates_data <- map_data("state") %>% group_by(region) %>% count()
states <- states_data[, "region"]
states_data <- map_data("state") %>% group_by(region) %>% count()
states <- states_data[, "region"]
states
states <- as.vector(states_data[, "region"])
states
runApp('Desktop/Class/AU2018/INFO201/Assignments/final project/final_project')
states <- as.character(as.vector(states_data[, "region"]))
states
states <- as.vector(states_data[, "region"])
class(states)
states <- states_data[, "region"]
class(states)
states <- states_data$region
class(states)
states
getwd
getwd()
setwd("Desktop/Class/AU2018/INFO201/Assignments/fishery_wifi/")
states <- read.csv("states_filtered.csv")
View(states)
states <- states[order(state$x),]
states <- states[order(states$x),]
runApp()
states <- states[order(states$x),]
states <- states[order(states$x),]
states <- read.csv("states_filtered.csv")
states <- states[order(states$x),]
class(states)
states <- read.csv("states_filtered.csv", stringsAsFactors = FALSE)
states <- states[order(states$x),]
class(states)
runApp()
runApp()
runApp()
runApp()
FCC_data <- fread("data_filtered.csv")
runApp()
library(shiny)
library(data.table)
FCC_data <- fread("data_filtered.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
View(FCC_data)
filtered_FCC <- FCC_data %>% filter(StateAbbr == Input$selected_state) %>%
select(MaxAdDown)
range_1_10 <- filtered_FCC %>% filter(MaxAdDown >= 1 & MaxAdDown < 10)
range_10_100 <- filtered_FCC %>% filter(MaxAdDown >= 10 & MaxAdDown < 100)
range_100_1000 <- filtered_FCC %>% filter(MaxAdDown >= 100 & MaxAdDown < 1000)
range_1000_more <- filtered_FCC %>% filter(MaxAdDown >= 1000)
range_name <- c("1-10 mbps", "10-100 mbps", "100-1000 mbps", "1000+ mbps")
range_value <- c( range_1_10,  range_10_100,  range_100_1000,  range_1000_more)
range_data <- data.frame(range_name, range_value)
runApp()
runApp()
runApp()
runApp()
runApp()
filtered_FCC <- FCC_data %>% filter(StateAbbr == WA) %>%
select(MaxAdDown)
range_1_10 <- filtered_FCC %>% filter(MaxAdDown >= 1 & MaxAdDown < 10)
range_10_100 <- filtered_FCC %>% filter(MaxAdDown >= 10 & MaxAdDown < 100)
range_100_1000 <- filtered_FCC %>% filter(MaxAdDown >= 100 & MaxAdDown < 1000)
range_1000_more <- filtered_FCC %>% filter(MaxAdDown >= 1000)
range_name <- c("1-10 mbps", "10-100 mbps", "100-1000 mbps", "1000+ mbps")
range_value <- c(range_1_10,  range_10_100,  range_100_1000,  range_1000_more)
range_data <- data.frame(range_name, range_value)
range_data <- range_data %>% rename(range = range_name) %>%
rename(value = range_value)
ggplot(range_data, aes(x="", y=value, fill=range))+
geom_bar(width = 2, stat = "identity", color = "black") +
coord_polar("y", start=0) +
ggtitle("Total Sightings of each UFO shapes") +
theme(plot.title = element_text(size=22))
filtered_FCC <- FCC_data %>% filter(StateAbbr == “WA”) %>%
select(MaxAdDown)
range_1_10 <- filtered_FCC %>% filter(MaxAdDown >= 1 & MaxAdDown < 10)
range_10_100 <- filtered_FCC %>% filter(MaxAdDown >= 10 & MaxAdDown < 100)
range_100_1000 <- filtered_FCC %>% filter(MaxAdDown >= 100 & MaxAdDown < 1000)
range_1000_more <- filtered_FCC %>% filter(MaxAdDown >= 1000)
range_name <- c("1-10 mbps", "10-100 mbps", "100-1000 mbps", "1000+ mbps")
range_value <- c(range_1_10,  range_10_100,  range_100_1000,  range_1000_more)
range_data <- data.frame(range_name, range_value)
range_data <- range_data %>% rename(range = range_name) %>%
rename(value = range_value)
ggplot(range_data, aes(x="", y=value, fill=range))+
geom_bar(width = 2, stat = "identity", color = "black") +
coord_polar("y", start=0) +
ggtitle("Total Sightings of each UFO shapes") +
theme(plot.title = element_text(size=22))
filtered_FCC <- FCC_data %>% filter(StateAbbr == "WA") %>%
select(MaxAdDown)
range_1_10 <- filtered_FCC %>% filter(MaxAdDown >= 1 & MaxAdDown < 10)
range_10_100 <- filtered_FCC %>% filter(MaxAdDown >= 10 & MaxAdDown < 100)
range_100_1000 <- filtered_FCC %>% filter(MaxAdDown >= 100 & MaxAdDown < 1000)
range_1000_more <- filtered_FCC %>% filter(MaxAdDown >= 1000)
range_name <- c("1-10 mbps", "10-100 mbps", "100-1000 mbps", "1000+ mbps")
range_value <- c(range_1_10,  range_10_100,  range_100_1000,  range_1000_more)
range_data <- data.frame(range_name, range_value)
range_data <- range_data %>% rename(range = range_name) %>%
rename(value = range_value)
ggplot(range_data, aes(x="", y=value, fill=range))+
geom_bar(width = 2, stat = "identity", color = "black") +
coord_polar("y", start=0) +
ggtitle("Total Sightings of each UFO shapes") +
theme(plot.title = element_text(size=22))
runApp()
filtered_FCC <- FCC_data %>% filter(StateAbbr == "WA") %>%
select(MaxAdDown)
range_1_10 <- filtered_FCC %>% filter(MaxAdDown >= 1 & MaxAdDown < 10) %>% nrow()
range_10_100 <- filtered_FCC %>% filter(MaxAdDown >= 10 & MaxAdDown < 100) %>% nrow()
range_100_1000 <- filtered_FCC %>% filter(MaxAdDown >= 100 & MaxAdDown < 1000) %>% nrow()
range_1000_more <- filtered_FCC %>% filter(MaxAdDown >= 1000) %>% nrow()
range_name <- c("1-10 mbps", "10-100 mbps", "100-1000 mbps", "1000+ mbps")
range_value <- c(range_1_10,  range_10_100,  range_100_1000,  range_1000_more)
range_data <- data.frame(range_name, range_value)
range_data <- range_data %>% rename(range = range_name) %>%
rename(value = range_value)
ggplot(range_data, aes(x="", y=value, fill=range))+
geom_bar(width = 2, stat = "identity", color = "black") +
coord_polar("y", start=0) +
ggtitle("Total Sightings of each UFO shapes") +
theme(plot.title = element_text(size=22))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("openintro")
runApp()
state_full_name <- state2abbr("PA")
state_full_name
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
View(states)
filtered_data <- FCC_data %>% select(StateAbbr, MaxAdDown)
state_averages
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
filtered_data <- FCC_data %>% select(StateAbbr, MaxAdDown)
state_averages
states <- map_data("state")
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE) + theme_void()
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), color = "white") +
coord_fixed(1.3) + scale_fill_brewer(palette = "Set1")
guides(fill=FALSE) + theme_void()
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, group = group), color = "white") +
coord_fixed(1.3) + scale_fill_brewer(palette = "Set1") +
guides(fill=FALSE) + theme_void()
View(state)
View(states)
states <- states %>% mutate(state.abb[grep(region, state.name)] = region)
states <- states %>% mutate(region = state.abb[grep(region, state.name)])
state.abb[grep("New York", state.name)
print(state.abb[grep("region"New York, state.name))
states <- states %>% mutate(region = state.abb[which(state.name == region)])
runApp()
filtered_data <- FCC_data %>% select(StateAbbr, MaxAdDown)
state_averages <- filtered_data %>% group_by(StateAbbr) %>% mean()
library(dplyr)
FCC_data <- fread("data_filtered.csv", stringsAsFactors = FALSE)
filtered_data <- FCC_data %>% select(StateName, MaxAdDown)
state_averages <- filtered_data %>% group_by(StateName) %>% mean(MaxAdDown)
state_median <- filtered_data %>% group_by(StateName) %>% summarize(median = median(MaxAdDown))
View(state_median)
library(dplyr)
states <- states %>% add_column(median_of_state)
library(dplyr)
states <- states %>% add_column()
?match
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = percentile, group = group), color = "white") +
coord_fixed(1.3) + theme_void()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/Class/AU2018/INFO201/Assignments/fishery_wifi/graphs.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/Class/AU2018/INFO201/Assignments/fishery_wifi/graphs.R', echo=TRUE)
runApp()
runApp()
runApp()
? scale_fill_gradientn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
ggplot(graphing_data, aes(x = Type, y = Average.Speed, fill = Type)) + geom_bar(stat="identity") +
coord_flip()  + scale_fill_brewer(palette="YlGnBu") +
ggtitle("Median AdvertisedSpeed of Each Mode of Service") +
theme(plot.title = element_text(size=22))
runApp('scripts')
runApp('scripts')
runApp('scripts')
ggplot(data = states) +
geom_polygon(aes(x = long, y = lat, fill = Mbps, group = group), color = "white") +
coord_fixed(1.3) +
scale_fill_gradient2(low = "yellow", high = "red") +
ggtitle(paste0("National Mean Advertised Internet ", graph_name, " Speed")) +
theme(plot.title = element_text(size=22))
runApp('scripts')
help("selectInput")
runApp('scripts')
ggplot(range_data, aes(x="", y=value, fill=range))+
geom_bar(width = 2, stat = "identity", color = "black") +
coord_polar("y", start=0) +
ggtitle(paste0("Advertised Speed Categories in ", state)) +
scale_fill_brewer(palette = "Set1") +
theme_void() +
theme(plot.title = element_text(size=22))
runApp('scripts')
=======
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `makeIntroduction`
# function
my_intro <- makeIntroduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
# variable
casual_intro <- function(name, age){
return("Hey, I'm " + name + ", and I'm " + age + " years old")
}
# Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quite_intro <- tolower(my_intro)
# Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
# hint: consult the stringr function `str_to_title`
intro_capitalized <- str_to_title(my_intro)
library("stringr")
# Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
# hint: consult the stringr function `str_to_title`
intro_capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write another function `Double` that takes in a (numeric) variable and returns that variable times two
Double <- function(num){
return(num*2)
}
## Using your `Double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- Double(minutes_in_day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower <- function(num){
return(num*num*num)
}
# Create a variable `twenty_seven`` by passing the number 3 to your `ThirdPower` function
twenty_seven <- ThirdPower(3)
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Hunger Game", "Home Alone", "Hobbit", "Inside Out", "Veteran")
# Create a vector `top_three` that only contains the first three movies in the vector
top_three <- movies[1:3]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[]
# Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[1:3] + movies[5:6]
# Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
# Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date("2018/10/8")
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- spring_break - today
days_to_break
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakeBirthdayIntro <- function(name, age, birthday){
# print(typeof(birthday))
if(typeof(birthday)!="character") {
print("Error! Wrong birthday format!")
return()
}
return(paste("Hello, my name is ", name, " and I'm ", age, " years old. In ", (as.Date(birthday)-today), " days I'll be ", age+1))
}
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakeBirthdayIntro(my_name, my_age, "2019-7-15")
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakeBirthdayIntro(my_name, my_age, "2019-7-15")
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(vec_string){
i <- 1
for (string in vec_string) {
string <- gsub('[[:digit:]]+', '', string)
# print(string)
vec_string[i] <- string
i <- i+1
}
# print(vec_string)
return(vec_string)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142"))
is_num_vec <- c("INFO 201", "CSE 142", "MATH 126")
is_num_vec <- RemoveDigits(is_num_vec)
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## suppressWarnings(warning(is_num_vec))
for (variable in is_num_vec) {
if(#!is.na(suppressWarnings(as.numeric(variable)))
grepl("^[[:digit:]]+L",variable)){
print("Oh no!")
}
else{
print("Yay!")
}
}
## Install and load the the `stringr` package, which has a variety of built in functions that make working
## with string variables easier.  You may read more about stringr in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Min"
# Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 60*24
# Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- 24*365
### Compute and print the following a bit useful numbers.
### Assign the result to a suitably named variable.
###
### How many seconds are there in year?
cat(seconds_in_year <- 60*60*hours_in_year)
### How many seconds is a typical human lifetime?
cat(seconds_in_human_life <- seconds_in_year*80)
### Age of the universe is 13.8 billion years.  What is it's age in seconds?
cat(age_of_universe <- seconds_in_year*13800000000)
# Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
# Write a function called `makeIntroduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
makeIntroduction <- function(name, age){
introduction <- paste("Hello, my name is ", name, ", and I'm ", age, " years old")
return(introduction)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `makeIntroduction`
# function
my_intro <- makeIntroduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
# variable
casual_intro <- function(name, age){
return("Hey, I'm " + name + ", and I'm " + age + " years old")
}
# Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quite_intro <- tolower(my_intro)
# Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
# hint: consult the stringr function `str_to_title`
intro_capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write another function `Double` that takes in a (numeric) variable and returns that variable times two
Double <- function(num){
return(num*2)
}
## Using your `Double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- Double(minutes_in_day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower <- function(num){
return(num*num*num)
}
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Hunger Game", "Home Alone", "Hobbit", "Inside Out", "Veteran")
# Create a variable `twenty_seven`` by passing the number 3 to your `ThirdPower` function
twenty_seven <- ThirdPower(3)
# Create a vector `top_three` that only contains the first three movies in the vector
top_three <- movies[1:3]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
# Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date("2018/10/8")
# Create a variable `spring_break` that represents the first day of spring break (Mar 10th, 2019).
# Make sure to use the `as.Date` function again
spring_break <- as.Date("2019-3-10")
# Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- spring_break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `MakeIntroduction()` function from Part 1, and compute {N} and {new_age} in your
## function
MakeBirthdayIntro <- function(name, age, birthday){
# print(typeof(birthday))
if(typeof(birthday)!="character") {
print("Error! Wrong birthday format!")
return()
}
return(paste("Hello, my name is ", name, " and I'm ", age, " years old. In ", (as.Date(birthday)-today), " days I'll be ", age+1))
}
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(vec_string){
i <- 1
for (string in vec_string) {
string <- gsub('[[:digit:]]+', '', string)
# print(string)
vec_string[i] <- string
i <- i+1
}
# print(vec_string)
return(vec_string)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142"))
is_num_vec <- c("INFO 201", "CSE 142", "MATH 126")
is_num_vec <- RemoveDigits(is_num_vec)
## Create a variable `my_bday_intro` using the `MakeBirthdayIntro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- MakeBirthdayIntro(my_name, my_age, "2019-7-15")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## suppressWarnings(warning(is_num_vec))
for (variable in is_num_vec) {
if(#!is.na(suppressWarnings(as.numeric(variable)))
grepl("^[[:digit:]]+L",variable)){
print("Oh no!")
}
else{
print("Yay!")
}
}
rm(list=ls())
save.image("~/clear.RData")
save.image("~/.Rhistory.RData")
setwd("C:/Computer Science/INFO 201/fishery_wifi/")
allData <- read.csv("../data/data_filtered.csv")
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
arrange(MaxCIRDown)
# load libraries
library(dplyr)
allData <- read.csv("../data/data_filtered.csv")
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
arrange(MaxCIRDown)
allData <- read.csv("../data/data_filtered.csv")
allData <- read.csv("./data/data_filtered.csv")
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
arrange(MaxCIRDown)
View(allData)
View(allData)
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
arrange(AvgMaxCIRDown)
View(state_data)
View(state_data)
View(state_data)
View(state_data)
shiny::runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
library(kableExtra)
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == state) %>%
group_by(ProviderName) %>%
summarize(AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
arrange(desc(AvgMaxCIRDown)) %>%
filter(AvgMaxCIRDown != 0)
table_data <- filter_data(input$selected_state)
filter_data("WA")
x <- filter_data("WA")
View(x)
x <- filter_data("WA")
View(x)
filter_data <- function(state){
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == state) %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0)
arrange(desc(AvgMaxAdDown))
}
x <- filter_data("WA")
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "wA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0)
View(state_data)
View(state_data)
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "wA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "wA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "wA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0)
arrange(desc(AvgMaxAdDown))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown))
library(kableExtra)
runApp('scripts')
as.data.frame(state_data)
runApp('scripts')
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown))
allData <- read.csv("../data/data_filtered.csv")
allData <- read.csv("./data/data_filtered.csv")
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
kable(digits=3, caption=paste0("Table 1: Speed of each Provider in ", state)) %>%
kable_styling()
runApp('scripts')
runApp('scripts')
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame()
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame() %>%
kable(digits=3, caption=paste0("Table 1: Speed of each Provider in ", state))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame() %>%
kable(digits=3, caption=paste0("Table 1: Speed of each Provider in ", "WA"))
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame() %>%
kable(digits=3, caption=paste0("Table 1: Speed of each Provider in ", "WA")) %>%
kable_styling()
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame() %>%
kable(digits=3, caption=paste0("Table 1: Speed of each Provider in ", "WA")) %>%
kable_styling() %>%
as.data.frame()
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame() %>%
kableExtra::kable(digits=3, caption=paste0("Table 1: Speed of each Provider in ", "WA")) %>%
kable_styling()
state_data
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
as.data.frame() %>%
kableExtra::kable("html", digits=3, caption=paste0("Table 1: Speed of each Provider in ", "WA")) %>%
kable_styling()
state_data
table_data <- filter_data(input$selected_state)
runApp('scripts')
state_data <- allData %>%
select(ProviderName, DBAName, HoldingCompanyName, HocoFinal, StateAbbr, MaxAdDown, MaxAdUp, MaxCIRDown, MaxCIRUp) %>%
filter(StateAbbr == "WA") %>%
group_by(ProviderName) %>%
summarize(AvgMaxAdDown=mean(MaxAdDown), AvgMaxAdUp=mean(MaxAdUp),
AvgMaxCIRDown=mean(MaxCIRDown), AvgMaxCIRUp=mean(MaxCIRUp)) %>%
filter(AvgMaxCIRDown != 0 || AvgMaxAdDown != 0 || AvgMaxCIRUp != 0 || AvgMaxAdUp != 0) %>%
arrange(desc(AvgMaxAdDown)) %>%
knitr::kable(format="html", digits=3, caption=paste0("Table 1: Speed of each Provider in ", "WA")) %>%
kable_styling()
state_data
>>>>>>> 8839dc8896d555af783ca2f32f1c34d67c6f9aaa
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
runApp('scripts')
